#+TITLE: My blog Post module
#+AUTHOR: Jakub Šťastný

* Exports & imports
** Code

#+BEGIN_SRC elm :tangle yes
  module Post exposing (Post, decodePost)

  import Json.Decode exposing (Decoder, decodeString, field, list, string, int)
#+END_SRC

** Test

Run with =elm-test=.

#+BEGIN_SRC elm :tangle PostTest.elm
  module PostTest exposing (..)

  import Expect exposing (Expectation)
  import Fuzz exposing (Fuzzer, int, list, string)
  import Test exposing (..)

  import Post exposing (..)
#+END_SRC

* Model

Body is in the Org mode format. Published time is in Unix epoch time.

#+BEGIN_SRC elm :tangle yes
  type alias Post = {
    title : String,
    excerpt : String,
    body : String,
    tags : List String,
    published_utime : Int}
#+END_SRC

** Example

#+BEGIN_SRC elm :tangle PostTest.elm
  postData = """
    {
      "title": "Hello world!",
      "excerpt": "Hey there, I decided to start blogging again.",
      "body": "* What is it going to be about?\n\nLorem ipsum ...",
      "tags": ["admin"],
      published_"utime": 1623423856
    }
  """
#+END_SRC

* Decoder

- The [[https://package.elm-lang.org/packages/elm/json/latest][elm/json]] package documentation.
- [[https://elmprogramming.com/decoding-json-part-1.html][Decoding JSON part I]]

#+BEGIN_SRC elm :tangle yes
  postDecoder : Decoder Post
  postDecoder =
    Json.Decode.map5 Post
      (field "title" string)
      (field "excerpt" string)
      (field "body" string)
      (field "tags" (list string))
      (field "published_utime" int)

  decodePost : String -> Result Json.Decode.Error Post
  decodePost postData = decodeString postDecoder postData
#+END_SRC

** Test

- The [[https://package.elm-lang.org/packages/elm-explorations/test/latest][elm/test]] package documentation.
- [[https://elmprogramming.com/easy-to-test.html][Elm Programming book: easy to test]]

#+BEGIN_SRC elm :tangle PostTest.elm
  suite : Test
  suite =
    describe "Post decoder"
      [ test "decodes example post" <|
        let
          post = decodePost postData
          case decodePost postData of
            Ok post -> 42
            Err _ ->
        in
        \_ -> Expect.equal post.title "test"
      ]
#+END_SRC

* Next

- [[https://elmprogramming.com/fuzz-testing][fuzz testing]]
- [[https://package.elm-lang.org/packages/avh4/elm-program-test/latest/][elm-program-test]] (Elm alternative to the [[https://testing-library.com][React testing library]]).
- [[https://elmprogramming.com/type-system.html][Elm programming book: type system]]

* Gotchas of =elm.json=

Firstly why do =elm make= require having =elm.json= at all? It's just a compiler!

Using JSON for configuration is a bad idea: JSON doesn't support comments.

- [[https://github.com/elm/compiler/blob/master/docs/elm.json/package.md][Elm.json reference for packages]]

** Enforced license

License field is obligatory and it enforced to be one of the common ones. Apparently I'm not allowed to have my own license in the Elm land. Or not to have one, which is relevant here, since this package is of no use to anyone but me.

** Project name validation

Although Elm says that we're to use the project name we use on GitHub (=author/pkg-name=), that doesn't work here, since I have dots in the repository name.
